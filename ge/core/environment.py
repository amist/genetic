class Environment():    def __init__(self, **kwargs):        self.kwargs = kwargs        self.validate_kwargs()                self.population = []        self.min_max =            kwargs.get('min_max', 'min')        self.population_size =    kwargs.get('population_size', 20)        self.expansion_factor =   kwargs.get('expansion_factor', 5)        self.crossover_method =   kwargs.get('crossover_method', 'regular')        self.mutation_rate =      kwargs.get('mutation_rate', 0.1)        self.mutation_amplitude = kwargs.get('mutation_amplitude', 1)        self.diversity_criteria = kwargs.get('diversity_criteria', 'none')                    def validate_kwargs(self):        # print(self.kwargs)        pass                    def initialize_population(self, individual_class, individual_kwargs):        for _ in range(self.population_size):            self.population.append(individual_class(**individual_kwargs))                            def sort_population(self):        sign = 1        if self.min_max == 'min':            sign = -1        self.population.sort(key=lambda x: sign * x.get_fitness_value())        