from random import randintfrom random import uniformclass Environment():    def __init__(self, **kwargs):        self.kwargs = kwargs        self.validate_kwargs()                self.population = []        self.min_max =            kwargs.get('min_max', 'min')        self.population_size =    kwargs.get('population_size', 20)        self.expansion_factor =   kwargs.get('expansion_factor', 5)        self.crossover_method =   kwargs.get('crossover_method', 'regular')        self.mutation_rate =      kwargs.get('mutation_rate', 0.1)        self.mutation_amplitude = kwargs.get('mutation_amplitude', 1)        self.diversity_criteria = kwargs.get('diversity_criteria', 'none')        self.individual_kwargs =  kwargs.get('individual_kwargs', {})        self.individual_class = None                    def validate_kwargs(self):        # print(self.kwargs)        pass                    def initialize_population(self, individual_class):        self.individual_class = individual_class        for _ in range(self.population_size):            self.population.append(individual_class(**self.individual_kwargs))                            def prepate_population(self):        for individual in self.population:            individual.fitness_value = None                            def expand_population(self):        for _ in range(self.expansion_factor):            # TODO: choosing method            parent1 = self.population[randint(0, self.population_size-1)]            parent2 = self.population[randint(0, self.population_size-1)]            # TODO: crossover method            child = self.individual_class(**self.individual_kwargs)            for i in range(len(parent1.chromosome)):                if randint(0,1) == 0:                    child.chromosome[i] = parent1.chromosome[i]                else:                    child.chromosome[i] = parent2.chromosome[i]            self.population.append(child)                            def mutate_population(self):        for individual in self.population:            for i in range(len(individual.chromosome)):                if randint(0, len(individual.chromosome)) == 0:                    print('before: {}'.format(individual.chromosome))                    individual.chromosome[i] = uniform(-individual.chromosome[i],individual.chromosome[i])  # TODO: real implementation                    print('after:  {}'.format(individual.chromosome))                            def sort_population(self):        sign = 1        if self.min_max == 'max':            sign = -1        self.population.sort(key=lambda x: sign * x.get_fitness_value())                    def process_generation(self):        self.prepate_population()        self.expand_population()        self.mutate_population()        self.sort_population()        self.population = self.population[:self.population_size]                